@using SmartElectronicsApi.Mvc.ViewModels.Product
@using SmartElectronicsApi.Mvc.ViewModels.pagination
@model PaginatedResponseVM<ProdutListItemVM>

<style>
    /* product-listing.css */
    
    /* Container Styles */
   

    /* Filter Card Styling */
    .filter-card {
        border-radius: 10px;
        border: none;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15); /* Increased shadow */
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background-color: #ffffff;
    }

    .filter-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

    .filter-card .card-header {
        background-color: #4a90e2; /* Softer blue */
        color: #fff;
        border-radius: 10px 10px 0 0;
        font-weight: bold;
        padding: 15px;
        font-size: 1.2rem;
    }

    .filter-card .card-header .reset-filters {
        background-color: transparent;
        border: 2px solid #fff;
        color: #fff;
        padding: 5px 10px;
        font-size: 0.8rem;
        border-radius: 20px;
        transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
        cursor: pointer;
    }

    .filter-card .filter-heading {
        cursor: pointer;
        font-weight: 600;
        padding: 15px;
        color: #4a90e2;
        border-bottom: 1px solid #ddd;
        transition: background-color 0.3s ease, color 0.3s ease;
        font-size: 1rem;
    }

    .filter-card .filter-heading:hover {
        color: #0056b3;
        background-color: #f0f0f0;
    }

    .filter-card .card-body {
        padding: 20px;
    }

    .filter-card .card-body ul {
        padding-left: 0;
    }

    .filter-card .card-body ul li {
        margin-bottom: 10px; /* Reduced space between items */
        display: flex;
        align-items: center;
        transition: transform 0.3s ease, background-color 0.3s ease;
        padding: 8px;
        border-radius: 5px;
        cursor: pointer;
    }

    .filter-card .card-body ul li:hover {
        transform: translateX(5px);
        background-color: #f7f7f7;
    }

    /* Product Card Styling */
    .product-card2 {
        border: none; /* Remove default border */
        border-radius: 15px; /* Make corners rounder */
        transition: box-shadow 0.3s ease, transform 0.3s ease;
        overflow: hidden; /* Prevent overflow */
        margin-bottom: 20px; /* Space between cards */
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15); /* Increased shadow */
    }

    .product-card2:hover {
        box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2); /* More pronounced shadow on hover */
        transform: translateY(-5px); /* Lift effect */
    }

    .product-card2 img {
        height: 250px; /* Set a consistent image height */
        object-fit: contain; /* Cover the card without distortion */
        transition: transform 0.3s ease;
    }

    .product-card2:hover img {
        transform: scale(1.05); /* Slight zoom effect on hover */
    }

    .product-card2 .card-title {
        font-size: 1.1rem; /* Increase font size for title */
        font-weight: bold; /* Make title bold */
    }

    .product-card2 .card-text {
        font-size: 0.85rem; /* Slightly smaller font for description */
        color: #555; /* Darker text color */
    }

    .product-card2 .price-info {
        font-size: 1rem; /* Increase font size for price */
        color: #4a90e2; /* Price in the same color palette */
    }

    .product-card2 .card-footer {
        padding: 10px 15px;
    }

    .product-card2 .btn-primary {
        background-color: #4a90e2; /* Primary button color */
        border: none;
        font-size: 0.9rem;
        border-radius: 25px;
        transition: background-color 0.3s ease, transform 0.3s ease;
        padding: 10px 20px;
        width: 100%;
        color: white;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .product-card2 .btn-primary:hover {
        background-color: #0056b3; /* Darker shade on hover */
        transform: scale(1.05); /* Scale up slightly */
    }

    /* Wishlist Icon */
    .wishlist-icon i {
        font-size: 1.2rem; /* Increase size for better visibility */
        cursor: pointer;
        transition: color 0.3s ease, transform 0.3s ease;
    }

    .wishlist-icon i:hover {
        color: #ff4757; /* Change color on hover */
        transform: scale(1.2); /* Slight scaling effect */
    }

    /* Badge for New Products */
    .badge {
        font-size: 0.75rem; /* Slightly smaller font for badges */
        padding: 0.4rem 0.8rem; /* More padding for better visibility */
        border-radius: 10px; /* Rounded corners */
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .product-card2 .card-title {
            font-size: 1rem; /* Adjust title size for smaller screens */
        }

        .product-card2 .card-text {
            font-size: 0.85rem; /* Adjust description size */
        }
    }

    /* Advanced Sorting Styles */
    .advanced-sorting {
        position: relative;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 15px;
        font-size: 1rem;
    }

    .advanced-sorting label {
        font-weight: bold;
        margin-right: 10px;
        color: #007bff;
    }

    .advanced-sorting .sorting-select {
        position: relative;
        width: 250px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #fff;
        transition: border-color 0.3s ease;
    }

    .advanced-sorting .sorting-select:hover {
        border-color: #007bff;
    }

    .advanced-sorting .sorting-select select {
        width: 100%;
        padding: 10px;
        border: none;
        outline: none;
        appearance: none;
        cursor: pointer;
        background: transparent;
        font-size: 1rem;
        color: #333;
    }

    .advanced-sorting .sorting-select::after {
        content: '\f078';
        font-family: 'Font Awesome 5 Free';
        font-weight: 900;
        position: absolute;
        top: 50%;
        right: 15px;
        transform: translateY(-50%);
        pointer-events: none;
        color: #007bff;
    }
</style>

<div class="container">
    <div id="loader" class="loader" style="display: none;"></div> <!-- Loader -->

    <div class="row">
        <!-- Product Grid -->
        <section class="col-lg-12 col-md-12">
            <!-- Advanced Sorting Section -->
            <div class="advanced-sorting mb-4">
                <label for="primarySort">Sort by:</label>
                <div class="sorting-select">
                    <select id="primarySort" class="form-select" onchange="handleSortChange()">
                        <option value="name" selected>
                            <i class="fas fa-font"></i> Name
                        </option>
                        <option value="price-asc">
                            <i class="fas fa-dollar-sign"></i> Price: Low to High
                        </option>
                        <option value="price-desc">
                            <i class="fas fa-dollar-sign"></i> Price: High to Low
                        </option>
                        <option value="createddate">
                            <i class="fas fa-calendar-alt"></i> Created Date
                        </option>
                        <option value="viewcount">
                            <i class="fas fa-eye"></i> View Count
                        </option>
                    </select>
                </div>
            </div>

            <script>
                function handleSortChange() {
                    // Show the loader
                    document.getElementById('loader').style.display = 'flex';

                    // Get the selected sorting value
                    const selectedSort = document.getElementById('primarySort').value;

                    // Determine sortBy and sortOrder based on the selected value
                    let sortBy, sortOrder;
                    if (selectedSort === "price-asc") {
                        sortBy = "Price";
                        sortOrder = "asc";
                    } else if (selectedSort === "price-desc") {
                        sortBy = "Price";
                        sortOrder = "desc";
                    } else {
                        sortBy = selectedSort.charAt(0).toUpperCase() + selectedSort.slice(1); // Capitalize first letter
                        sortOrder = "desc"; // Default sort order
                    }

                    const urlParams = new URLSearchParams(window.location.search);
                    const pageNumber = urlParams.get('pageNumber') || 1;
                    const pageSize = urlParams.get('pageSize') || 10;
                    const searchQuery = urlParams.get('searchQuery') || null;

                    // Construct the new URL
                    let newUrl = `@Url.Action("Search", "Product")?sortBy=${sortBy}&sortOrder=${sortOrder}&pageNumber=${pageNumber}&pageSize=${pageSize}`;
                    if (searchQuery) {
                        newUrl += `&searchQuery=${searchQuery}`;
                    }

                    // Redirect to the updated URL
                    window.location.href = newUrl;
                }
            </script>

            <!-- Product Grid -->
            <div class="row g-4" id="productGrid">
                @foreach (var item in Model.Data)
                {
                    <div class="col-sm-6 col-md-4 col-lg-4 mb-4">
                        <div class="card shadow-sm product-card2">
                            <div class="position-relative overflow-hidden">
                                ,<a asp-action="Detail" asp-controller="Product" asp-route-id="@item.Id">
                                    <img src="@item.ImageUrls.FirstOrDefault()" alt="Product Image" class="card-img-top">
                                </a>
                                @if (item.isNew)
                                {
                                    <div class="badge bg-success position-absolute top-0 start-0 m-2 p-2 rounded">New</div>
                                }
                                <div class="wishlist-icon position-absolute top-0 end-0 m-2 p-2">
                                    <i class="fa fa-heart fa-lg text-danger"></i>
                                </div>
                            </div>
                            <div class="card-body text-center">
                                <h5 class="card-title">@item.Name</h5>
                                <p class="card-text">
                                    @(item.Description.Length >= 40 ? item.Description.Substring(0, 40) + "..." : item.Description)
                                </p>
                                <div class="price-info mb-2">
                                    <span class="fw-bold text-primary fs-5">@item.DiscountedPrice AZN <del class="text-muted">@item.Price AZN</del></span>
                                </div>
                               
                            </div>
                            <div class="card-footer bg-transparent border-top-0">
                                <button class="btn btn-primary w-100">
                                    <i class="fa fa-cart-plus"></i> Add to Cart
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </section>
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(Model.PageNumber == 1 ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Search", new { pageNumber = Model.PageNumber - 1, pageSize = Model.PageSize })" tabindex="-1">Previous</a>
            </li>

            @for (int i = 1; i <= Math.Ceiling((double)Model.TotalRecords / Model.PageSize); i++)
            {
                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Search", new { pageNumber = i, pageSize = Model.PageSize })">@i</a>
                </li>
            }

            <li class="page-item @(Model.PageNumber == Math.Ceiling((double)Model.TotalRecords / Model.PageSize) ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Search", new { pageNumber = Model.PageNumber + 1, pageSize = Model.PageSize })">Next</a>
            </li>
        </ul>
    </nav>
</div>
